events {
    worker_connections 1024;
}

http {
    # Upstream configuration for backend replicas
    # Docker Compose will automatically resolve 'backend' to all replica IPs
    upstream backend_cluster {
        # Docker's internal DNS will resolve to all backend replicas (app)
        server app:3000 max_fails=3 fail_timeout=30s;

        # Load balancing method
        least_conn;  # Distribute to least connected server

        # Health check settings
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Resolver for dynamic upstream resolution
    resolver 127.0.0.11 valid=30s;

    # WebSocket upgrade configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Main server configuration
    server {
        listen 80;
        server_name localhost;

        # Increase client body size for file uploads
        client_max_body_size 10M;

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings for better performance
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

                # Health check endpoint
        location /health {
            proxy_pass http://backend_cluster/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";  # Clear connection header

            # Add load balancer info to response headers
            add_header X-Load-Balancer nginx always;
            add_header X-Backend-Server $upstream_addr always;
        }

        # API endpoints
        location /api/ {
            proxy_pass http://backend_cluster;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";  # Clear connection header

            add_header X-Load-Balancer nginx always;
        }

        # Default location - proxy all other requests to backend
        location / {
            proxy_pass http://backend_cluster;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";  # Clear connection header

            # Add load balancer info
            add_header X-Load-Balancer nginx always;
        }

        # Nginx status page for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr '
                    'response_time: $upstream_response_time';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
}
